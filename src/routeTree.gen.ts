/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as UserAccountIndexImport } from './routes/user/account/index'
import { Route as ShopCheckoutIndexImport } from './routes/shop/checkout/index'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const ShopIndexLazyImport = createFileRoute('/shop/')()
const AdminIndexLazyImport = createFileRoute('/admin/')()
const SplatIndexLazyImport = createFileRoute('/$/')()
const ShopCheckoutOrderSuccessOrderIdLazyImport = createFileRoute(
  '/shop/checkout/order-success/$orderId',
)()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ShopIndexLazyRoute = ShopIndexLazyImport.update({
  id: '/shop/',
  path: '/shop/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/shop/index.lazy').then((d) => d.Route))

const AdminIndexLazyRoute = AdminIndexLazyImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/admin/index.lazy').then((d) => d.Route))

const SplatIndexLazyRoute = SplatIndexLazyImport.update({
  id: '/$/',
  path: '/$/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/$/index.lazy').then((d) => d.Route))

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const UserAccountIndexRoute = UserAccountIndexImport.update({
  id: '/user/account/',
  path: '/user/account/',
  getParentRoute: () => rootRoute,
} as any)

const ShopCheckoutIndexRoute = ShopCheckoutIndexImport.update({
  id: '/shop/checkout/',
  path: '/shop/checkout/',
  getParentRoute: () => rootRoute,
} as any)

const ShopCheckoutOrderSuccessOrderIdLazyRoute =
  ShopCheckoutOrderSuccessOrderIdLazyImport.update({
    id: '/shop/checkout/order-success/$orderId',
    path: '/shop/checkout/order-success/$orderId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/shop/checkout/order-success/$orderId.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/$/': {
      id: '/$/'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/shop/': {
      id: '/shop/'
      path: '/shop'
      fullPath: '/shop'
      preLoaderRoute: typeof ShopIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/shop/checkout/': {
      id: '/shop/checkout/'
      path: '/shop/checkout'
      fullPath: '/shop/checkout'
      preLoaderRoute: typeof ShopCheckoutIndexImport
      parentRoute: typeof rootRoute
    }
    '/user/account/': {
      id: '/user/account/'
      path: '/user/account'
      fullPath: '/user/account'
      preLoaderRoute: typeof UserAccountIndexImport
      parentRoute: typeof rootRoute
    }
    '/shop/checkout/order-success/$orderId': {
      id: '/shop/checkout/order-success/$orderId'
      path: '/shop/checkout/order-success/$orderId'
      fullPath: '/shop/checkout/order-success/$orderId'
      preLoaderRoute: typeof ShopCheckoutOrderSuccessOrderIdLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthIndexRoute
  '/$': typeof SplatIndexLazyRoute
  '/admin': typeof AdminIndexLazyRoute
  '/shop': typeof ShopIndexLazyRoute
  '/shop/checkout': typeof ShopCheckoutIndexRoute
  '/user/account': typeof UserAccountIndexRoute
  '/shop/checkout/order-success/$orderId': typeof ShopCheckoutOrderSuccessOrderIdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/auth': typeof AuthIndexRoute
  '/$': typeof SplatIndexLazyRoute
  '/admin': typeof AdminIndexLazyRoute
  '/shop': typeof ShopIndexLazyRoute
  '/shop/checkout': typeof ShopCheckoutIndexRoute
  '/user/account': typeof UserAccountIndexRoute
  '/shop/checkout/order-success/$orderId': typeof ShopCheckoutOrderSuccessOrderIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/auth/': typeof AuthIndexRoute
  '/$/': typeof SplatIndexLazyRoute
  '/admin/': typeof AdminIndexLazyRoute
  '/shop/': typeof ShopIndexLazyRoute
  '/shop/checkout/': typeof ShopCheckoutIndexRoute
  '/user/account/': typeof UserAccountIndexRoute
  '/shop/checkout/order-success/$orderId': typeof ShopCheckoutOrderSuccessOrderIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth'
    | '/$'
    | '/admin'
    | '/shop'
    | '/shop/checkout'
    | '/user/account'
    | '/shop/checkout/order-success/$orderId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/$'
    | '/admin'
    | '/shop'
    | '/shop/checkout'
    | '/user/account'
    | '/shop/checkout/order-success/$orderId'
  id:
    | '__root__'
    | '/'
    | '/auth/'
    | '/$/'
    | '/admin/'
    | '/shop/'
    | '/shop/checkout/'
    | '/user/account/'
    | '/shop/checkout/order-success/$orderId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AuthIndexRoute: typeof AuthIndexRoute
  SplatIndexLazyRoute: typeof SplatIndexLazyRoute
  AdminIndexLazyRoute: typeof AdminIndexLazyRoute
  ShopIndexLazyRoute: typeof ShopIndexLazyRoute
  ShopCheckoutIndexRoute: typeof ShopCheckoutIndexRoute
  UserAccountIndexRoute: typeof UserAccountIndexRoute
  ShopCheckoutOrderSuccessOrderIdLazyRoute: typeof ShopCheckoutOrderSuccessOrderIdLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AuthIndexRoute: AuthIndexRoute,
  SplatIndexLazyRoute: SplatIndexLazyRoute,
  AdminIndexLazyRoute: AdminIndexLazyRoute,
  ShopIndexLazyRoute: ShopIndexLazyRoute,
  ShopCheckoutIndexRoute: ShopCheckoutIndexRoute,
  UserAccountIndexRoute: UserAccountIndexRoute,
  ShopCheckoutOrderSuccessOrderIdLazyRoute:
    ShopCheckoutOrderSuccessOrderIdLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/",
        "/$/",
        "/admin/",
        "/shop/",
        "/shop/checkout/",
        "/user/account/",
        "/shop/checkout/order-success/$orderId"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/$/": {
      "filePath": "$/index.lazy.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.lazy.tsx"
    },
    "/shop/": {
      "filePath": "shop/index.lazy.tsx"
    },
    "/shop/checkout/": {
      "filePath": "shop/checkout/index.tsx"
    },
    "/user/account/": {
      "filePath": "user/account/index.tsx"
    },
    "/shop/checkout/order-success/$orderId": {
      "filePath": "shop/checkout/order-success/$orderId.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
